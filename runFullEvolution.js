/**
 * Run Full Matrix-Based Evolution
 * 3 tournaments √ó 7 games = 21 total games
 */

const { runEnhancedEvolution } = require('./src/core/enhancedEvolutionarySystem');

async function runFullEvolution() {
  console.log('üöÄ STARTING FULL MATRIX-BASED EVOLUTION');
  console.log('=====================================');
  console.log('üìä 3 tournaments √ó 7 games = 21 total games');
  console.log('‚ö° Matrix negotiations (3 rounds vs 5 text rounds)');
  console.log('üí∞ Profit-focused strategy evolution');
  console.log('üìà Full tracking and resume capability');
  console.log('üî¢ Starting with 6 core strategies...');
  console.log('');

  try {
    const results = await runEnhancedEvolution(3, 7);
    
    console.log('');
    console.log('üéâ EVOLUTION COMPLETE!');
    console.log('======================');
    console.log('üìÅ Export file:', results.exportFile);
    console.log('üíæ Progress file:', results.lastProgressFile);
    
    console.log('');
    console.log('üèÜ FINAL RANKINGS:');
    results.finalStats.forEach((strategy, index) => {
      const rank = ['ü•á', 'ü•à', 'ü•â', 'üìç', 'üìç', 'üìç'][index];
      const profit = strategy.coinBalance - 500;
      const profitStr = profit >= 0 ? `+${profit}` : `${profit}`;
      console.log(`${rank} ${strategy.name}: ${strategy.coinBalance} coins (${profitStr} profit)`);
      console.log(`   ROI: ${strategy.roi}% | Win Rate: ${strategy.winRate}% | Games: ${strategy.gamesPlayed}`);
    });

    console.log('');
    console.log('üìà EVOLUTION STATISTICS:');
    console.log(`üìä Total games played: ${results.finalStats.reduce((sum, s) => sum + s.gamesPlayed, 0) / 6}`);
    console.log(`üí∞ Average final balance: ${Math.round(results.finalStats.reduce((sum, s) => sum + s.coinBalance, 0) / 6)} coins`);
    console.log(`üèÜ Successful strategies: ${results.finalStats.filter(s => s.coinBalance > 500).length}/6`);
    
    if (results.errorSummary) {
      console.log('');
      console.log('‚ö†Ô∏è  ERROR SUMMARY:');
      console.log(JSON.stringify(results.errorSummary, null, 2));
    }

  } catch (error) {
    console.error('');
    console.error('‚ùå EVOLUTION FAILED:');
    console.error(`   Error: ${error.message}`);
    console.error(`   Stack: ${error.stack}`);
  }
}

// Run if called directly
if (require.main === module) {
  runFullEvolution().catch(console.error);
}

module.exports = { runFullEvolution }; 